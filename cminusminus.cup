/**********************************************************************
 Java CUP specification for a parser for C-- programs.
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/*
 * The code below redefines method syntax_error to give better error messages
 * than just "Syntax error".
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner). */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Non-terminals
 *
 * NOTE: You will need to add more non-terminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody;
non terminal LinkedList       varDeclList;
non terminal FnDeclNode	      fnDecl;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList	      stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode	      exp;
non terminal CallExpNode      fncall;
non terminal ExpNode          loc;
non terminal ExpNode	      term;
non terminal LinkedList	      actualList;
non terminal LinkedList	      formals;	      
/* Precedences
 *
 * NOTE: Add precedence and associativity declarations here.
 *
 */

precedence left DOT;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT;

start with program;


/* The grammar with actions
 *
 * NOTE: add more grammar rules below.
 *
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
		| structDecl: s
		{: RESULT = s;
		:}
		| fnDecl:fDecl
		{: RESULT = fDecl;
		:}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
		| STRUCT id:i id:j SEMICOLON
		{: RESULT = new VarDeclNode(new StructNode(i), j, 0);
		:}
                ;

varDeclList     ::= varDeclList:vdList varDecl:vd
		{: vdList.addLast(vd);
		   RESULT = vdList;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<VarDeclNode>();
		:}
		;

type            ::= INT
                {: RESULT = new IntNode();
                :}
		| BOOL
		{: RESULT = new BoolNode();
		:}
		| VOID
		{: RESULT = new VoidNode();
		:} 
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;

structDecl	::= STRUCT id:i LCURLY structBody:body RCURLY SEMICOLON
		{:  RESULT = new StructDeclNode(i, new DeclListNode(body));
		:}
		;

structBody	::= structBody:body varDecl:vd
		{: body.add(vd);
		   RESULT = body;
		:}
		|
		 varDecl:vd
		{: LinkedList<VarDeclNode> vdList = new LinkedList<VarDeclNode>();
		   vdList.addLast(vd);
		   RESULT = vdList;
		:}
		;

fnDecl		::= type:t id:i formals:f fnBody:fBody
		{: RESULT = new FnDeclNode(t, i, new FormalsListNode(f), fBody);
		:}
		;

formals		::= LPAREN RPAREN
		{: RESULT = new LinkedList<FormalDeclNode>();
		:}
		|LPAREN formalsList:fList RPAREN
		{: RESULT = fList;
		:}
		;

formalsList	::= formalDecl:fDecl
		{: LinkedList<FormalDeclNode> fdList = new LinkedList<FormalDeclNode>();
		   fdList.addLast(fDecl);
		   RESULT = fdList;
		:}		
		| formalDecl:fDecl COMMA formalsList:fList
		{: fList.addLast(fDecl);
		   RESULT = fList;
		:}
		;

formalDecl	::= type:t id:i        // note: no struct parameters
		{: RESULT = new FormalDeclNode(t,i);
		:}
		;

fnBody		::= LCURLY varDeclList:vdList stmtList:sList RCURLY
		{: RESULT = new FnBodyNode(new DeclListNode(vdList), new StmtListNode(sList));
		:}
		;

stmtList	::= stmtList:sList stmt:s
		{: sList.addLast(s);
		   RESULT = sList;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<StmtNode>();
		:}
		;

stmt		::= assignExp:aExp SEMICOLON
		{: RESULT = new AssignStmtNode(aExp);
		:}
		|loc:l PLUSPLUS SEMICOLON
		{: RESULT = new PostIncStmtNode(l);
		:}
		| loc:l MINUSMINUS SEMICOLON
		{: RESULT = new PostDecStmtNode(l);
		:}
		| CIN READ loc:l SEMICOLON
		{: RESULT = new ReadStmtNode(l);
		:}
		| COUT WRITE exp:e SEMICOLON
		{: RESULT = new WriteStmtNode(e);
		:}
		| IF LPAREN exp:e RPAREN LCURLY varDeclList:vdList stmtList:sList RCURLY
		{: RESULT = new IfStmtNode(e, new DeclListNode(vdList), new StmtListNode(sList));
		:}
		| IF LPAREN exp:e RPAREN LCURLY varDeclList:vdList stmtList:sList RCURLY ELSE LCURLY varDeclList:vdList2 stmtList:sList2 RCURLY		
		{: RESULT = new IfElseStmtNode(e, new DeclListNode(vdList), new StmtListNode(sList),
						new DeclListNode(vdList2), new StmtListNode(sList2));
		:}
		| WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vdList stmtList:sList RCURLY
		{: RESULT = new WhileStmtNode(e, new DeclListNode(vdList), new StmtListNode(sList));
		:}
		| REPEAT LPAREN exp:e RPAREN LCURLY varDeclList:vdList stmtList:sList RCURLY
		{: RESULT = new RepeatStmtNode(e, new DeclListNode(vdList), new StmtListNode(sList));
		:}
		| RETURN exp:e SEMICOLON
		{: RESULT = new ReturnStmtNode(e);
		:}
		| RETURN SEMICOLON
		{: RESULT = new ReturnStmtNode(null);
		:}
		| fncall:fnc SEMICOLON 
		{: RESULT = new CallStmtNode(fnc);
		:}
		;

assignExp       ::= loc:l ASSIGN exp:e
		{: RESULT = new AssignNode(l, e);
		:}
		;

exp		::= assignExp:aExp
		{: RESULT = aExp;
		:}
		| exp:e1 PLUS exp:e2
		{: RESULT = new PlusNode(e1, e2);
		:}
		| exp:e1 MINUS exp:e2
		{: RESULT = new MinusNode(e1, e2);
		:}
		| exp:e1 TIMES exp:e2
		{: RESULT = new TimesNode(e1, e2);
		:}
		| exp:e1 DIVIDE exp:e2
		{: RESULT = new DivideNode(e1, e2);
		:}
		| NOT exp:e
		{: RESULT = new NotNode(e);
		:}
		| exp:e1 AND exp:e2
		{: RESULT = new AndNode(e1, e2);
		:}
		| exp:e1 OR exp:e2
		{: RESULT = new OrNode(e1, e2);
		:}
		| exp:e1 EQUALS exp:e2
		{: RESULT = new EqualsNode(e1, e2);
		:}
		| exp:e1 NOTEQUALS exp:e2
		{: RESULT = new NotEqualsNode(e1, e2);
		:}
		| exp:e1 LESS exp:e2
		{: RESULT = new LessNode(e1, e2);
		:}
		| exp:e1 GREATER exp:e2
		{: RESULT = new GreaterNode(e1, e2);
		:}
		| exp:e1 LESSEQ exp:e2
		{: RESULT = new LessEqNode(e1,e2);
		:}
		| exp:e1 GREATEREQ exp:e2
		{: RESULT = new GreaterEqNode(e1, e2);
		:}
		| MINUS term:t
		{: RESULT = new UnaryMinusNode(t);
		:}
		| term:t
		{: RESULT = t;
		:}
		;

term		::= loc:l
		{: RESULT = l;
		:}
		| INTLITERAL:i
		{: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
		:}
		| STRINGLITERAL:s
		{: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
		:}
		| TRUE:t
		{: RESULT = new TrueNode(t.linenum, t.charnum);
		:}
		| FALSE:f
		{: RESULT = new FalseNode(f.linenum, f.charnum);
		:}
		| LPAREN exp:e RPAREN
		{: RESULT = e;
		:}
		| fncall:fnc
		{: RESULT = fnc;
		:}
		;

fncall		::=  id:i LPAREN RPAREN   // fn call with no args
		{: RESULT = new CallExpNode(i, new ExpListNode(new LinkedList<ExpNode>()));
		:}
		| id:i LPAREN actualList:aList RPAREN  // with args
		{: RESULT = new CallExpNode(i, new ExpListNode(aList));
		:}
		;

actualList      ::= exp:e
		{: LinkedList<ExpNode> aList = new LinkedList<ExpNode>();
		   aList.addLast(e);
		   RESULT = aList;
		:}
		| actualList:aList COMMA exp:e
		{: aList.addLast(e);
		   RESULT = aList;
		:}
		;

loc             ::= id:i
		{: RESULT = i;
		:}
		| loc:l DOT id:i
		{: RESULT = new DotAccessExpNode(l, i);
		:}
		;
